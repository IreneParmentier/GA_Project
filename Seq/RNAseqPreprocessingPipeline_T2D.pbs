!/usr/bin/env bash

#PBS -l nodes=1:ppn=8
#PBS -l walltime=01:00:00
#PBS -l mem=16gb

# Load the necessary modules
module load TopHat/2.1.2-gompi-2020a

# Change to the directory you are working in 
cd /user/gent/458/vsc45855/HW2


# Create Pseudo Transcriptome
gtf_to_fasta Homo_sapiens.GRCh38.109.chr.gtf Homo_sapiens.GRCh38.dna.toplevel.fa Human_PseudoTranscriptome.fa


# Unload the modules (for compatibility)
module purge

# Load the necessary modules
module load parallel-fastq-dump/0.6.7-gompi-2022a
module load kallisto/0.48.0-gompi-2022a
module load MultiQC/1.14-foss-2022a
module load Trimmomatic/0.39-Java-11
module load FastQC/0.11.9-Java-11

# Create index
kallisto index -i Human_index Human_PseudoTranscriptome.fa

# Make a directory to store kallisto logs
mkdir kallisto_logs
# mkdir fastqc

# For loop over all samples
for ID in SAMEA4437008 SAMEA4437009	SAMEA4437010 SAMEA4437011 SAMEA4437012 SAMEA4437013 SAMEA4437014				
# This for loop will loop over the variables after "in" each time attributing the value SRRXXX as to $ID
do 
	# Echo the ID you are processing
	echo $ID
	
	# Load the first (-X 1000000) 1,000,000 reads for the ID (--sra-id $ID) you are processing using 8 cores (--threads 8)
	parallel-fastq-dump --sra-id $ID --threads 8 -X 1000000
	
	# Perform trimming based on the quality score (-phred33) with a sliding window (SLIDINGWINDOW:4:15) using 8 cores (-threads 8)
	# storing the results in $ID\_trimQuality.fastq
	java -jar $EBROOTTRIMMOMATIC/trimmomatic-0.39.jar SE -threads 8 -phred33 $ID.fastq $ID\_trimQuality.fastq SLIDINGWINDOW:4:15
	java -jar $EBROOTTRIMMOMATIC/trimmomatic-0.39.jar SE -threads 8 -phred33 $ID\_trimQuality.fastq $ID\_trimBoth.fastq ILLUMINACLIP:Adapters.fa:2:30:10
	
	# Perform QC with fastqc on the trimmed reads outputting everything in the fastqc folder (--outdir fastqc)
	fastqc --outdir fastqc $ID\_trimQuality.fastq
	fastqc --outdir fastqc $ID\_trimBoth.fastq
	
	# Make directory to output alignment results
	mkdir $ID\_quant

	# Pseudo-alignment using kallisto
	kallisto quant -i Human_index -o $ID\_quant -t 8 --single -l 100 -s 1 -g Human.GRCh38.p13.gtf $ID\_trimBoth.fastq &> kallisto_logs/$ID\_kallisto.log
	
	# Change numeric ids in kallisto output with gene IDs (this is more advanced unix coding)
	grep ">" Human_PseudoTranscriptome.fa | cut -d" " -f 2 > $ID\_quant/transcriptIDs.txt
	awk '{OFS = "\t"} FNR==NR{a[NR+1]=$1;next}{if(FNR!=1){$1=a[FNR]}}1' $ID\_quant/transcriptIDs.txt $ID\_quant/abundance.tsv > $ID\_quant/abundance_bis.tsv
	mv $ID\_quant/abundance_bis.tsv $ID\_quant/abundance.tsv
	
	# Remove fastq files to reduce disk usage
	rm $ID.fastq
	rm $ID\_trimQuality.fastq
	rm $ID\_trimBoth.fastq
done

# Make directory to output all alignment
mkdir kallisto_quant
# Put all kallisto output files in one directory (easier for downloading and downstream processing with Rstudio!)
for ID in SAMEA4437008 SAMEA4437009	SAMEA4437010 SAMEA4437011 SAMEA4437012 SAMEA4437013 SAMEA4437014							
do
	mv $ID\_quant/abundance.h5 kallisto_quant/$ID\_abundance.h5
	mv $ID\_quant/abundance.tsv kallisto_quant/$ID\_abundance.tsv
	mv $ID\_quant/run_info.json kallisto_quant/$ID\_run_info.json
	rm -r $ID\_quant
done

# Use multiqc to make an overview of all quality control and log files performed 
# ("." option searches all files and subdirectories of the current working directory)
multiqc .